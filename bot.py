import os
import datetime
import asyncio
import logging
from dotenv import load_dotenv
from openai import OpenAI

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile

from logo_generator import generate_logo

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
count_image = int(os.getenv("count_image", 5)) # –ª–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –¥–ª—è –±–æ—Ç

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
if not BOT_TOKEN or not OPENAI_API_KEY:
    raise RuntimeError("–ù–µ –∑–∞–¥–∞–Ω—ã BOT_TOKEN –∏–ª–∏ OPENAI_API_KEY –≤ .env")

# --- –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º Flask-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –∏ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö ---
from app import app, db
from models import ImageHistory

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
results_dir = os.path.join(app.instance_path, "results")
os.makedirs(results_dir, exist_ok=True)

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- FSM-—Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ–ø–∏—Å–∞–Ω–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ ---
class ImageStates(StatesGroup):
    waiting_for_prompt = State()

# --- –¢–µ–∫—Å—Ç –ø–æ–º–æ—â–∏ –ø–æ –±–æ—Ç—É ---
HELP_TEXT = (
    "\nüí° –Ø –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç! –ö–æ–º–∞–Ω–¥—ã:\n"
    "‚ú® /start ‚Äî –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é\n"
    "‚ùì /help ‚Äî –ø–æ–≤—Ç–æ—Ä—è–µ—Ç —ç—Ç—É –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é\n"
    "üé® /image ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ª–æ–≥–æ—Ç–∏–ø–∞ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é\n"
    "üñºÔ∏è /history ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–æ–≥–æ—Ç–∏–ø–æ–≤\n"
    "‚è≥ /limit ‚Äî —É–∑–Ω–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–π –æ—Å—Ç–∞–ª–æ—Å—å –≤ —ç—Ç–æ–º —á–∞—Å—É\n"
    "‚ùå /cancel ‚Äî –æ—Ç–º–µ–Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏\n"
    "‚úÖ /status ‚Äî —É–∑–Ω–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞\n"
    "‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç ‚Äî —è –ø–æ–¥–¥–µ—Ä–∂—É —Ä–∞–∑–≥–æ–≤–æ—Ä –∏–ª–∏ –ø–æ–¥—Å–∫–∞–∂—É –¥–∞—Ç—É/–≤—Ä–µ–º—è!"
)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç! –Ø ü§ñ –±–æ—Ç-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ª–æ–≥–æ—Ç–∏–ø–æ–≤ —Å –ø–æ–º–æ—â—å—é Yandex ART –∏ OpenAI!" + HELP_TEXT)

@dp.message(Command("help"))
async def help_handler(message: types.Message):
    await message.answer(HELP_TEXT)

@dp.message(Command("cancel"))
async def cancel_handler(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")

@dp.message(Command("status"))
async def status_handler(message: types.Message):
    await message.answer("‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –ï—Å–ª–∏ –∂–¥—ë—Ç–µ –∫–∞—Ä—Ç–∏–Ω–∫—É ‚Äî –æ–±—ã—á–Ω–æ —ç—Ç–æ –∑–∞–Ω–∏–º–∞–µ—Ç 10‚Äì20 —Å–µ–∫—É–Ω–¥.\n–ï—Å–ª–∏ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç –¥–æ–ª—å—à–µ 1‚Äì2 –º–∏–Ω—É—Ç ‚Äî –≤–æ–∑–º–æ–∂–Ω–æ, —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")

@dp.message(Command("image"))
async def image_command(message: types.Message, state: FSMContext):
    await message.answer("üé® –ü—Ä–∏—à–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–æ—Ç–∏–ø–∞ (–ø—Ä–æ–º–ø—Ç):")
    await state.set_state(ImageStates.waiting_for_prompt)

@dp.message(ImageStates.waiting_for_prompt)
async def handle_image_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    tg_user_id = message.from_user.id

    # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –ø–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤—É –≥–µ–Ω–µ—Ä–∞—Ü–∏–π ---
    one_hour_ago = datetime.datetime.utcnow() - datetime.timedelta(hours=1)
    with app.app_context():
        count = ImageHistory.query.filter_by(tg_user_id=tg_user_id, source="bot") \
            .filter(ImageHistory.timestamp > one_hour_ago).count()
    if count >= count_image:
        await message.answer(f"üö¶ –õ–∏–º–∏—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏–π: –Ω–µ –±–æ–ª–µ–µ {count_image} –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ —á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ!")
        await state.clear()
        return

    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    try:
        image_data = generate_logo(prompt)

        now_utc = datetime.datetime.utcnow()
        timestamp = now_utc.strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"tg_{tg_user_id}_{timestamp}.jpg"
        filepath = os.path.join(results_dir, filename)
        with open(filepath, "wb") as file:
            file.write(image_data)

        # --- –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î –∏ —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ ---
        with app.app_context():
            record = ImageHistory(prompt=prompt, filename=filename, tg_user_id=tg_user_id, source="bot", timestamp=now_utc)
            db.session.add(record)
            db.session.commit()

            all_imgs = ImageHistory.query.filter_by(tg_user_id=tg_user_id, source="bot") \
                .order_by(ImageHistory.timestamp.desc()).all()
            for extra in all_imgs[10:]:
                old_path = os.path.join(results_dir, extra.filename)
                if os.path.exists(old_path):
                    os.remove(old_path)
                db.session.delete(extra)
            db.session.commit()

        await message.answer_photo(FSInputFile(filepath), caption=f"üñºÔ∏è –í–æ—Ç —Ç–≤–æ–π –ª–æ–≥–æ—Ç–∏–ø –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<code>{prompt}</code>", parse_mode=ParseMode.HTML)

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è")
        if hasattr(e, "response") and getattr(e.response, "status_code", None) == 500:
            await message.answer("‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        else:
            await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {e}")

    await state.clear()

@dp.message(Command("history"))
async def history_handler(message: types.Message):
    tg_user_id = message.from_user.id
    with app.app_context():
        images = ImageHistory.query.filter_by(tg_user_id=tg_user_id, source="bot") \
            .order_by(ImageHistory.timestamp.desc()).limit(10).all()
    if not images:
        await message.answer("üòï –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ª–æ–≥–æ—Ç–∏–ø–æ–≤.")
        return

    await message.answer(f"üñºÔ∏è –ò—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö {len(images)} –ª–æ–≥–æ—Ç–∏–ø–æ–≤:")
    for item in images:
        photo_path = os.path.join(results_dir, item.filename)
        if os.path.exists(photo_path):
            await message.answer_photo(
                FSInputFile(photo_path),
                caption=f"ID: {item.id} ‚Äî <code>{item.prompt}</code>",
                parse_mode=ParseMode.HTML
            )

@dp.message(Command("limit"))
async def limit_handler(message: types.Message):
    tg_user_id = message.from_user.id
    one_hour_ago = datetime.datetime.utcnow() - datetime.timedelta(hours=1)
    with app.app_context():
        count = ImageHistory.query.filter_by(tg_user_id=tg_user_id, source="bot") \
            .filter(ImageHistory.timestamp > one_hour_ago).count()
    await message.answer(
        f"‚è≥ –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π —á–∞—Å –≤—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–ª–∏ {count}/{count_image} –ª–æ–≥–æ—Ç–∏–ø–æ–≤.\n"
        f"–°–ª–µ–¥—É—é—â–∏–π –ª–∏–º–∏—Ç –æ–±–Ω—É–ª–∏—Ç—Å—è —á–µ—Ä–µ–∑ {60 - datetime.datetime.now().minute} –º–∏–Ω—É—Ç."
    )

@dp.message()
async def chat_handler(message: types.Message):
    text = message.text.lower()
    if any(word in text for word in ["–≤—Ä–µ–º—è", "–¥–∞—Ç–∞", "—á–∏—Å–ª–æ", "—á–∞—Å", "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å", "–∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è", "–∫–æ—Ç–æ—Ä—ã–π —á–∞—Å", "—Å–∫–æ–ª—å–∫–æ –Ω–∞—Ç–∏–∫–∞–ª–æ"]):
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        await message.answer(f"üìÖ –°–µ–≥–æ–¥–Ω—è {now}")
        return

    try:
        response = await asyncio.to_thread(
            client.chat.completions.create,
            model="gpt-4o-mini-2024-07-18",
            messages=[{"role": "user", "content": message.text}],
            max_tokens=400
        )
        answer = response.choices[0].message.content
        await message.answer(f"ü§ñ {answer}")
    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI")
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ---
if __name__ == "__main__":
    asyncio.run(dp.start_polling(bot))
