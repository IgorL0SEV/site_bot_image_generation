import os
import datetime
from dotenv import load_dotenv

from openai import OpenAI

from aiogram import Bot, Dispatcher, types
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile

from logo_generator import generate_logo

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ---
client = OpenAI(api_key=OPENAI_API_KEY)
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher()

# --- FSM –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ ---
class ImageStates(StatesGroup):
    waiting_for_prompt = State()

@dp.message(Command("start"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n"
        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
    )

@dp.message(Command("help"))
async def start_handler(message: types.Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º.\n"
        "–ù–∞–ø–∏—à–∏ —á—Ç–æ-–Ω–∏–±—É–¥—å, —á—Ç–æ–±—ã –ø–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å–æ –º–Ω–æ–π, –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–æ–º–∞–Ω–¥—É /image –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏."
    )

@dp.message(Command("image"))
async def image_command(message: types.Message, state: FSMContext):
    await message.answer("–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ (–ø—Ä–æ–º–ø—Ç):")
    await state.set_state(ImageStates.waiting_for_prompt)

@dp.message(ImageStates.waiting_for_prompt)
async def handle_image_prompt(message: types.Message, state: FSMContext):
    prompt = message.text
    await message.answer("‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")
    try:
        image_data = generate_logo(prompt)
        timestamp = datetime.datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
        filename = f"image_{timestamp}.jpeg"
        with open(filename, "wb") as file:
            file.write(image_data)
        photo = FSInputFile(filename)
        await message.answer_photo(
            photo,
            caption=f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É:\n<code>{prompt}</code>",
            parse_mode=ParseMode.HTML
        )
        os.remove(filename)
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    await state.clear()

@dp.message()
async def chat_handler(message: types.Message):
    text = message.text.lower()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø—Ä–æ –¥–∞—Ç—É/–≤—Ä–µ–º—è
    if any(word in text for word in ["–≤—Ä–µ–º—è", "–¥–∞—Ç–∞", "—á–∏—Å–ª–æ", "–∫–∞–∫–æ–π —Å–µ–≥–æ–¥–Ω—è –¥–µ–Ω—å", "–∫–∞–∫–æ–µ —Å–µ–π—á–∞—Å –≤—Ä–µ–º—è"]):
        now = datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        await message.answer(f"–°–µ–≥–æ–¥–Ω—è {now}")
        return

    # –í –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–ª—É—á–∞—è—Ö ‚Äî –æ—Ç–≤–µ—Ç —á–µ—Ä–µ–∑ GPT
    try:
        response = client.chat.completions.create(
            model="gpt-4o-mini-2024-07-18",
            messages=[{"role": "user", "content": message.text}],
            max_tokens=400
        )
        answer = response.choices[0].message.content
        await message.answer(answer)
    except Exception as e:
        await message.answer(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ OpenAI: {e}")

if __name__ == "__main__":
    import asyncio
    asyncio.run(dp.start_polling(bot))

